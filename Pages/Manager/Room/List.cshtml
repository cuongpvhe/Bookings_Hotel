
@page
@model Bookings_Hotel.Pages.Manager.RoomsModel
@{
    ViewData["Title"] = "Rooms List";
    Layout = "~/Pages/Shared/Layout_admin.cshtml";
}

<head>
    <link rel="stylesheet" href="~/admin_template/css/room.css" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

</head>

<div class="main-header d-flex justify-content-between">
    <div>
        <span class="mb-0 fs-3 fw-bold">Danh sách phòng</span>
    </div>

    <div>
            <a class=" btn btn-primary rounded-pill px-4" asp-page="Create">Tạo phòng mới</a>
    </div>
</div>

<div class="search-bar d-flex justify-content-start">
    <div class="me-2">
        <select class="form-select" id="statusFilter" aria-label="Status filter">
            <option value="All">Tất cả trạng thái</option>
            <option value="Active">Hoạt động</option>
            <option value="Inactive">Không hoạt động</option>
        </select>
    </div>

    <div class="d-flex justify-content-between">
        <input id="searchInput" class="form-control me-2" type="search" placeholder="Hãy nhập gì đó..." aria-label="Tìm kiếm">
        <button class="btn btn-primary me-0" type="button" id="searchButton"><i class="ri-search-line"></i></button>
    </div>
</div>

<div class="table-container">
    <div id="roomListContainer">
        @await Html.PartialAsync("PartialViews/Manager/_RoomsPartialView", Model)
    </div>
</div>




<div class="pagination-container ">
    <div class="me-2">
        <select class="form-select" aria-label="Default select example" id="pageSize">
            <option value="1">10</option>
            <option value="2">20</option>
            <option value="3">30</option>
        </select>
    </div>

    <div>
        <nav aria-label="...">
            <ul class="pagination m-0">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link ajax-page" href="?pageIndex=@(Model.CurrentPage - 1)" data-page="@(Model.CurrentPage - 1)">Previous</a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link ajax-page" href="?pageIndex=@i" data-page="@i">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link ajax-page" href="?pageIndex=@(Model.CurrentPage + 1)" data-page="@(Model.CurrentPage + 1)">Next</a>
                </li>
            </ul>
        </nav>
    </div>
</div>
@Html.AntiForgeryToken()
@section Scripts {
<script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function confirmDelete(roomId) {
            Swal.fire({
                text: "Bạn muốn xóa phòng này không?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Có',
                cancelButtonText: 'Không'
        }).then((result) => {
            if (result.isConfirmed) {
                deleteRoom(roomId);
            }
        });
    }


    function deleteRoom(roomId) {
        $.ajax({
            url: '/Manager/Room/List?handler=Delete',
            type: 'POST',
            data: {
                id: roomId
            },
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            beforeSend: function () {
                Swal.fire({
                    title: 'Đang xử lý',

                    allowOutsideClick: false,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    }
                });
            },
            success: function (response) {
                if (response.success) { 
                    window.location.reload();
                }
                
            },
            error: function (xhr, status, error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Đã có lỗi xảy ra',
                        text: 'Đã có lỗi xảy ra trong quá trình xóa'
                    });

                var errorMessage = xhr.responseText; 
                console.log(errorMessage);
            }
        });
    }

    $(document).ready(function () {
        $('#statusFilter').on('change', function () {
            var status = $(this).val();
            var query = $('#searchInput').val();
            loadPageContent({ searchTerm: query, status: status, pageIndex: 1 });
        });

        $('#searchButton').on('click', function () {
            var query = $('#searchInput').val();
            var status = $('#statusFilter').val();
            loadPageContent({ searchTerm: query, status: status, pageIndex: 1 });
        });

        // Handle pagination clicks
        $(document).on('click', '.ajax-page', function (e) {
            e.preventDefault();
            var pageIndex = $(this).data('page');
            var query = $('#searchInput').val();
            var status = $('#statusFilter').val();

            if (pageIndex > 0) {
                loadPageContent({
                    searchTerm: query,
                    status: status,
                    pageIndex: pageIndex
                });
                updatePagination(pageIndex);
            }
        });

        function loadPageContent(data) {
            $.ajax({
                url: '/Manager/Room/List?handler=Search',
                type: 'GET',
                data: data,
                success: function (result) {
                    $('#roomListContainer').html(result);
                    updatePagination(data.pageIndex);
                },
                error: function () {
                    alert('Error fetching data');
                }
            });
        }

        function updatePagination(currentPage) {
            $('.pagination .page-item').removeClass('active');
            $('.pagination .page-item').each(function () {
                var pageLink = $(this).find('.page-link');
                if (pageLink.data('page') == currentPage) {
                    $(this).addClass('active');
                }
            });

            var prevPageItem = $('.pagination .page-item').first();
            prevPageItem.toggleClass('disabled', currentPage == 1);
            prevPageItem.find('.page-link').data('page', parseInt(currentPage) - 1);

            var nextPageItem = $('.pagination .page-item').last();
            var totalPages = @Model.TotalPages;
            nextPageItem.toggleClass('disabled', currentPage == totalPages);
            nextPageItem.find('.page-link').data('page', parseInt(currentPage) + 1);
        }
    });

      
</script>
}